package org.example;

import org.example.task3.University;
import org.example.task3.enams.ClothingType;
import org.example.task3.enams.Emotion;
import org.example.task3.enams.EventType;
import org.example.task3.enams.LockStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;

class DomainModelTest {

    private University university;
    private Room room;
    private Person person;
    private Door door;
    private Event event;

    @BeforeEach
    void setUp() {
        university = new University("–ö—Ä—É–∫—Å–≤–∞–Ω—Å–∫–∏–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–°–∏–Ω–∏–π —Å–∏–º–≤–æ–ª");
        room = new Room();
        person = new Person("–ê–ª—å—Ç–∞–∏—Ä", "–ú–∞–≥", Emotion.ANGRY, university);
        door = new Door(false, LockStatus.LOCKED);
        event = new Event(EventType.INVASION, room, "–ú–∞–≥–∏ –≤–æ—Ä–≤–∞–ª–∏—Å—å –≤ –∑–∞–ª");
    }

    // üîπ 1Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
    @Test
    @DisplayName("–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")
    void testUniversityCreation() {
        assertEquals("–ö—Ä—É–∫—Å–≤–∞–Ω—Å–∫–∏–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", university.getName());
        assertEquals("–°–∏–Ω–∏–π —Å–∏–º–≤–æ–ª", university.getSymbol());
    }

    // üîπ 2Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä–µ–π –≤ –∫–æ–º–Ω–∞—Ç—É
    @Test
    @DisplayName("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–µ—Ä–∏ –≤ –∫–æ–º–Ω–∞—Ç—É")
    void testAddDoorToRoom() {
        room.addDoor(door);
        assertFalse(door.isOpen());  // –î–≤–µ—Ä—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
    }

    // üîπ 3Ô∏è‚É£ –¢–µ—Å—Ç –Ω–∞ –≤—Ö–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    @Test
    @DisplayName("–í—Ö–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç—É")
    void testPersonEnteringRoom() {
        room.addPerson(person);
        assertEquals(1, room.getPeopleInside().size());
    }

    // üîπ 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    @ParameterizedTest
    @CsvSource({"ANGRY", "CALM", "EXCITED", "SCARED"})
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º–æ—Ü–∏–π")
    void testPersonEmotions(Emotion emotion) {
        Person testPerson = new Person("–ú–∞–≥–∏—Å—Ç—Ä", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", emotion, university);
        assertEquals(emotion, testPerson.getEmotion());
    }

    // üîπ 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    @Test
    @DisplayName("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂—É")
    void testPersonClothing() {
        Clothing robe = new Clothing(ClothingType.ROBE, "–°–∏–Ω–∏–π");
        person.addClothing(robe);
        assertEquals(1, person.getClothing().size());
        assertEquals(ClothingType.ROBE, person.getClothing().get(0).getType());
    }

    // üîπ 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏
    @Test
    @DisplayName("–û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–∏")
    void testDoorOpenClose() {
        door.open();
        assertTrue(door.isOpen());

        door.close();
        assertFalse(door.isOpen());
    }

    // üîπ 7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–º–∫–∞ –¥–≤–µ—Ä–∏
    @ParameterizedTest
    @CsvSource({"LOCKED", "UNLOCKED"})
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–º–∫–∞ –¥–≤–µ—Ä–∏")
    void testDoorLockStatus(LockStatus lockStatus) {
        Door testDoor = new Door(false, lockStatus);
        assertEquals(lockStatus, testDoor.getLockStatus());
    }

    // üîπ 8Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    @Test
    @DisplayName("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ–±—ã—Ç–∏–µ")
    void testEventParticipants() {
        event.addParticipant(person);
        assertEquals(1, event.getParticipants().size());
        assertEquals("–ê–ª—å—Ç–∞–∏—Ä", event.getParticipants().get(0).getName());
    }

    // üîπ 9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    @ParameterizedTest
    @CsvSource({"INVASION", "CONVERSATION", "FIGHT"})
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π")
    void testEventTypes(EventType eventType) {
        Event testEvent = new Event(eventType, room, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ");
        assertEquals(eventType, testEvent.getType());
    }

    // üîπ üîü –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —à—É–º–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    @Test
    @DisplayName("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à—É–º–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ")
    void testRoomNoiseLevel() {
        Person p1 = new Person("–ú–∞–≥1", "–°—Ç—É–¥–µ–Ω—Ç", Emotion.EXCITED, university);
        Person p2 = new Person("–ú–∞–≥2", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", Emotion.CALM, university);

        room.addPerson(p1);
        room.addPerson(p2);

        assertEquals(20, room.getNoiseLevel());  // +10 –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    }
}
